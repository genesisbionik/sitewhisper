"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./app/page.tsx":
/*!**********************!*\
  !*** ./app/page.tsx ***!
  \**********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ HomePage; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _components_ui_button__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/components/ui/button */ \"(app-pages-browser)/./components/ui/button.tsx\");\n/* harmony import */ var _components_chat_message__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/components/chat-message */ \"(app-pages-browser)/./components/chat-message.tsx\");\n/* harmony import */ var _components_chat_input__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/components/chat-input */ \"(app-pages-browser)/./components/chat-input.tsx\");\n/* harmony import */ var _components_memory_block__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/components/memory-block */ \"(app-pages-browser)/./components/memory-block.tsx\");\n/* harmony import */ var _components_url_form__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/components/url-form */ \"(app-pages-browser)/./components/url-form.tsx\");\n/* harmony import */ var _components_token_status__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/components/token-status */ \"(app-pages-browser)/./components/token-status.tsx\");\n/* harmony import */ var _components_upgrade_button__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @/components/upgrade-button */ \"(app-pages-browser)/./components/upgrade-button.tsx\");\n/* harmony import */ var _barrel_optimize_names_Download_lucide_react__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! __barrel_optimize__?names=Download!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/download.js\");\n/* harmony import */ var _components_ui_use_toast__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @/components/ui/use-toast */ \"(app-pages-browser)/./components/ui/use-toast.ts\");\n/* harmony import */ var _lib_openrouter__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @/lib/openrouter */ \"(app-pages-browser)/./lib/openrouter.ts\");\n/* harmony import */ var _components_crawl_status__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @/components/crawl-status */ \"(app-pages-browser)/./components/crawl-status.tsx\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\n\n\n\n\n\nconst INITIAL_TOKENS = 100;\nfunction HomePage() {\n    _s();\n    const [messages, setMessages] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([\n        {\n            role: \"assistant\",\n            content: \"\\uD83D\\uDC4B Welcome to SiteWhisper! Enter any website URL above to analyze and transform web content into AI-ready knowledge. I'll help you extract valuable information and create structured Whisper memory blocks that AI systems can understand.\\n\\nLet's begin! Just paste a URL to get started. âœ¨\"\n        }\n    ]);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [memoryBlocks, setMemoryBlocks] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [availableTokens, setAvailableTokens] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(INITIAL_TOKENS);\n    const [isUrlSubmitting, setIsUrlSubmitting] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [selectedBlocks, setSelectedBlocks] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const { toast } = (0,_components_ui_use_toast__WEBPACK_IMPORTED_MODULE_9__.useToast)();\n    const handleBlockClick = (id)=>{\n        setSelectedBlocks((prev)=>prev.includes(id) ? prev.filter((blockId)=>blockId !== id) : [\n                ...prev,\n                id\n            ]);\n    };\n    const handleUrlSubmit = async (url)=>{\n        console.log(\"Submitting URL:\", url);\n        if (availableTokens < 10) {\n            toast({\n                title: \"Not enough tokens\",\n                description: \"Please purchase more tokens to continue scanning.\",\n                variant: \"destructive\"\n            });\n            return;\n        }\n        try {\n            setIsUrlSubmitting(true);\n            setIsLoading(true);\n            setMessages((prev)=>[\n                    ...prev,\n                    {\n                        role: \"user\",\n                        content: \"Analyzing \".concat(url)\n                    },\n                    {\n                        role: \"assistant\",\n                        content: \"Starting the crawl process. This may take a few moments...\"\n                    }\n                ]);\n            // Step 1: Get URLs from local endpoint\n            const localCrawlResponse = await fetch(\"https://urlsscrape-git-main-kartik1337s-projects.vercel.app/api/crawl?url=\".concat(encodeURIComponent(url)));\n            const localCrawlData = await localCrawlResponse.json();\n            if (!localCrawlResponse.ok) {\n                throw new Error(\"Failed to fetch URLs from local endpoint\");\n            }\n            // Extract URLs from local crawl response\n            const urlsToProcess = localCrawlData.urls;\n            // Step 2: Call the Crawl4AI API with the collected URLs\n            const crawlResponse = await fetch(\"https://crawl4ai-production.up.railway.app/crawl\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    urls: urlsToProcess,\n                    priority: 10,\n                    magic: true,\n                    config: {\n                        session_id: \"website_content_session\",\n                        cache_mode: \"bypass\",\n                        extraction_strategy: {\n                            type: \"llm\",\n                            config: {\n                                task: \"summarize\",\n                                max_length: 10000,\n                                prompt: \"Provide a concise summary of the main points and key information from this webpage. Focus on the most important details that describe what this page or site is about.\",\n                                model: \"gpt-3.5-turbo\" // or your preferred model\n                            }\n                        }\n                    }\n                })\n            });\n            const crawlData = await crawlResponse.json();\n            if (!crawlResponse.ok) {\n                throw new Error(crawlData.error || \"Failed to initiate crawl process\");\n            }\n            // Step 3: Poll the task status with improved handling\n            const { task_id } = crawlData;\n            let taskResponse;\n            let retries = 20; // Increased from 10\n            let delay = 8000;\n            while(retries > 0){\n                try {\n                    taskResponse = await fetch(\"https://crawl4ai-production.up.railway.app/task/\".concat(task_id));\n                    const taskData = await taskResponse.json();\n                    console.log(\"Task status:\", taskData.status);\n                    if (taskResponse.ok && taskData.status === \"completed\") {\n                        console.log(\"Task RESULT:\", taskData);\n                        if (taskData.results && taskData.results.length > 0) {\n                            // Combine content from all results using any type\n                            const combinedContent = taskData.results.map((result)=>result.cleaned_html || result.html || \"\").join(\"\\n\\n\");\n                            // Create a single memory block with combined content\n                            // Create a single memory block with cleaned content\n                            const singleMemoryBlock = [\n                                {\n                                    id: \"consolidated-block\",\n                                    title: url,\n                                    content: (()=>{\n                                        try {\n                                            // Parse the task data\n                                            const parsedData = JSON.parse(JSON.stringify(taskData));\n                                            // If results exist, clean and extract key information\n                                            if (parsedData.results && parsedData.results.length > 0) {\n                                                const cleanedResults = parsedData.results.map((result)=>{\n                                                    // Remove HTML tags, escape characters, and extract plain text\n                                                    const cleanContent = result.html ? result.html.replace(/<[^>]*>/g, \"\") // Remove HTML tags\n                                                    .replace(/\\\\n/g, \" \") // Replace line breaks\n                                                    .replace(/\\s+/g, \" \") // Collapse whitespace\n                                                    .trim() : \"\";\n                                                    return {\n                                                        url: result.url,\n                                                        content: cleanContent\n                                                    };\n                                                });\n                                                return JSON.stringify(cleanedResults);\n                                            }\n                                            return \"No processable content\";\n                                        } catch (error) {\n                                            console.error(\"Content parsing error:\", error);\n                                            return \"Content parsing failed\";\n                                        }\n                                    })(),\n                                    type: \"whisper\"\n                                }\n                            ];\n                            setMemoryBlocks(singleMemoryBlock);\n                            setMessages((prev)=>[\n                                    ...prev,\n                                    {\n                                        role: \"assistant\",\n                                        content: \"I've analyzed \".concat(url, \" and created Whisper memory blocks. The crawl process is complete.\")\n                                    }\n                                ]);\n                            setAvailableTokens((prev)=>prev - 10);\n                            return; // Exit successfully\n                        } else {\n                            throw new Error(\"Completed but no results found\");\n                        }\n                    } else if (taskData.status === \"failed\") {\n                        throw new Error(\"Crawl task failed: \".concat(taskData.error || \"Unknown error\"));\n                    } else if (taskData.status === \"processing\") {\n                        console.log(\"Task in progress, attempts remaining: \".concat(retries));\n                        setMessages((prev)=>[\n                                ...prev,\n                                {\n                                    role: \"assistant\",\n                                    content: \"Still processing... (\".concat(retries, \" attempts remaining)\")\n                                }\n                            ]);\n                    }\n                } catch (error) {\n                    console.error(\"Error polling task:\", error);\n                }\n                retries -= 1;\n                delay *= 1.5; // Exponential backoff\n                await new Promise((resolve)=>setTimeout(resolve, delay));\n            }\n            if (retries === 0) {\n                throw new Error(\"Task polling timed out - please try again\");\n            }\n        } catch (error) {\n            console.error(\"Error submitting URL:\", error);\n            toast({\n                title: \"Submission Error\",\n                //description: error.message || \"Failed to start website analysis. Please try again later.\",\n                variant: \"destructive\"\n            });\n        } finally{\n            setIsLoading(false);\n            setIsUrlSubmitting(false);\n        }\n    };\n    const handleExport = async ()=>{\n        if (availableTokens < 5) {\n            toast({\n                title: \"Not enough tokens\",\n                description: \"Please purchase more tokens to export data.\",\n                variant: \"destructive\"\n            });\n            return;\n        }\n        if (memoryBlocks.length > 0) {\n            const blob = new Blob([\n                JSON.stringify(memoryBlocks, null, 2)\n            ], {\n                type: \"application/json\"\n            });\n            const url = URL.createObjectURL(blob);\n            const a = document.createElement(\"a\");\n            a.href = url;\n            a.download = \"whisper_memory_blocks.json\";\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            URL.revokeObjectURL(url);\n            setAvailableTokens((prev)=>prev - 5);\n            toast({\n                title: \"Export successful\",\n                description: \"Your Whisper memory blocks have been exported successfully.\"\n            });\n        }\n    };\n    const filterMemoryBlock = (query)=>{\n        if (!memoryBlocks.length) return null;\n        // Match user query with page content or title\n        const filteredBlock = memoryBlocks.find((block)=>block.title.toLowerCase().includes(query.toLowerCase()) || block.content.toLowerCase().includes(query.toLowerCase()));\n        return filteredBlock || memoryBlocks[0]; // Default to the consolidated block\n    };\n    // Text preprocessing utility\n    function preprocessText(text) {\n        return text.toLowerCase().replace(/[^\\w\\s]/g, \"\").split(/\\s+/).filter((word)=>word.length > 2); // Filter out very short words\n    }\n    // Enhanced TF-IDF calculation\n    function calculateTFIDF(documents) {\n        const wordVectors = new Map();\n        const wordCounts = documents.map((doc)=>{\n            const words = preprocessText(doc);\n            return words.reduce((acc, word)=>{\n                acc.set(word, (acc.get(word) || 0) + 1);\n                return acc;\n            }, new Map());\n        });\n        const wordDocs = new Map();\n        wordCounts.forEach((docWords)=>{\n            docWords.forEach((_, word)=>{\n                wordDocs.set(word, (wordDocs.get(word) || 0) + 1);\n            });\n        });\n        const N = documents.length;\n        wordDocs.forEach((docFreq, word)=>{\n            const vector = wordCounts.map((docWords)=>{\n                const tf = docWords.get(word) || 0;\n                const idf = Math.log(N / docFreq);\n                return tf * idf;\n            });\n            wordVectors.set(word, vector);\n        });\n        return wordVectors;\n    }\n    // Cosine similarity calculation\n    function cosineSimilarity(vec1, vec2) {\n        if (vec1.length !== vec2.length) return 0;\n        const dotProduct = vec1.reduce((sum, val, i)=>sum + val * vec2[i], 0);\n        const mag1 = Math.sqrt(vec1.reduce((sum, val)=>sum + val * val, 0));\n        const mag2 = Math.sqrt(vec2.reduce((sum, val)=>sum + val * val, 0));\n        return mag1 && mag2 ? dotProduct / (mag1 * mag2) : 0;\n    }\n    // Function to analyze user intent\n    async function analyzeUserIntent(query) {\n        try {\n            const response = await (0,_lib_openrouter__WEBPACK_IMPORTED_MODULE_10__.generateChatCompletion)([\n                {\n                    role: \"system\",\n                    content: \"Analyze this query and identify pages that user is asking that might appear in URLs or content, It words should be in given query. Return just a comma-separated list of relevant terms.\"\n                },\n                {\n                    role: \"user\",\n                    content: query\n                }\n            ]);\n            return response.split(\",\").map((term)=>term.trim().toLowerCase());\n        } catch (error) {\n            console.error(\"Error analyzing intent:\", error);\n            return preprocessText(query);\n        }\n    }\n    const classifyQuery = (query)=>{\n        const pageSpecificIndicators = [\n            \"page\",\n            \"article\",\n            \"post\",\n            \"section\",\n            \"where\",\n            \"find\",\n            \"search\",\n            \"look for\"\n        ];\n        const siteWideIndicators = [\n            \"how many\",\n            \"what is\",\n            \"website\",\n            \"site\",\n            \"overall\",\n            \"total\",\n            \"summary\"\n        ];\n        query = query.toLowerCase();\n        const isPageSpecific = pageSpecificIndicators.some((indicator)=>query.includes(indicator));\n        const isSiteWide = siteWideIndicators.some((indicator)=>query.includes(indicator));\n        return {\n            isPageSpecific,\n            isSiteWide\n        };\n    };\n    const extractSiteStructure = (parsedContent)=>{\n        const urls = parsedContent.map((item)=>item.url);\n        // Get main sections from URLs\n        const sections = urls.map((url)=>{\n            const parts = url.split(\"/\").filter(Boolean);\n            return parts[0] || \"\"; // Get first part of path\n        });\n        const uniqueSections = [\n            ...new Set(sections)\n        ].filter(Boolean);\n        return {\n            totalUrls: urls.length,\n            uniqueUrls: new Set(urls).size,\n            mainSections: uniqueSections,\n            urls: urls\n        };\n    };\n    // Enhanced chat handler\n    const handleChat = async (message)=>{\n        if (availableTokens < 2) {\n            toast({\n                title: \"Not enough tokens\",\n                description: \"Please purchase more tokens to continue chatting.\",\n                variant: \"destructive\"\n            });\n            return;\n        }\n        // Add user message\n        setMessages((prev)=>[\n                ...prev,\n                {\n                    role: \"user\",\n                    content: message\n                }\n            ]);\n        // Set loading state\n        setIsLoading(true);\n        try {\n            const memoryBlock = memoryBlocks[0];\n            if (!memoryBlock) throw new Error(\"No memory block available\");\n            const parsedContent = JSON.parse(memoryBlock.content);\n            const queryClassification = classifyQuery(message);\n            // Add initial assistant message\n            setMessages((prev)=>[\n                    ...prev,\n                    {\n                        role: \"assistant\",\n                        content: \"\",\n                        isStreaming: true\n                    }\n                ]);\n            // Get the index for the assistant message\n            const assistantMessageIndex = messages.length;\n            // Prepare the messages based on query type\n            const systemMessage = queryClassification.isSiteWide ? \"You are a website analyzer...\" : queryClassification.isPageSpecific ? \"You are a webpage content analyzer...\" : \"You are a helpful assistant...\";\n            // Handle streaming response\n            let streamedContent = \"\";\n            await (0,_lib_openrouter__WEBPACK_IMPORTED_MODULE_10__.generateChatCompletion)([\n                {\n                    role: \"system\",\n                    content: systemMessage\n                },\n                {\n                    role: \"user\",\n                    content: message\n                }\n            ], (chunk)=>{\n                streamedContent += chunk;\n                setMessages((prev)=>{\n                    const updated = [\n                        ...prev\n                    ];\n                    if (updated[assistantMessageIndex]) {\n                        updated[assistantMessageIndex] = {\n                            role: \"assistant\",\n                            content: streamedContent,\n                            isStreaming: true\n                        };\n                    }\n                    return updated;\n                });\n            });\n            // Update final message without streaming flag\n            setMessages((prev)=>{\n                const updated = [\n                    ...prev\n                ];\n                if (updated[assistantMessageIndex]) {\n                    updated[assistantMessageIndex] = {\n                        role: \"assistant\",\n                        content: streamedContent,\n                        isStreaming: false\n                    };\n                }\n                return updated;\n            });\n            setAvailableTokens((prev)=>prev - 2);\n        } catch (error) {\n            console.error(\"Error in chat:\", error);\n            setMessages((prev)=>[\n                    ...prev,\n                    {\n                        role: \"assistant\",\n                        content: \"I encountered an error while processing your request. Please try again.\",\n                        isStreaming: false\n                    }\n                ]);\n        } finally{\n            setIsLoading(false);\n        }\n    };\n    const hasTokens = availableTokens > 0;\n    const showUpgrade = !hasTokens || availableTokens < 5;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"container mx-auto flex min-h-[calc(100vh-4rem)] flex-col gap-4 p-4 max-w-7xl\",\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"grid gap-4 lg:grid-cols-[2fr,1fr]\",\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"flex flex-col rounded-lg border bg-background shadow-sm\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"flex flex-col gap-4 border-b p-4\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_url_form__WEBPACK_IMPORTED_MODULE_6__.UrlForm, {\n                                    onSubmit: handleUrlSubmit,\n                                    isLoading: isUrlSubmitting\n                                }, void 0, false, {\n                                    fileName: \"/Users/Steve/Documents/SiteWhisperAi/app/page.tsx\",\n                                    lineNumber: 502,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_crawl_status__WEBPACK_IMPORTED_MODULE_11__.CrawlStatus, {\n                                    isActive: isUrlSubmitting,\n                                    message: isUrlSubmitting ? \"Analyzing website content...\" : undefined\n                                }, void 0, false, {\n                                    fileName: \"/Users/Steve/Documents/SiteWhisperAi/app/page.tsx\",\n                                    lineNumber: 503,\n                                    columnNumber: 13\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/Steve/Documents/SiteWhisperAi/app/page.tsx\",\n                            lineNumber: 501,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"flex-1 overflow-auto\",\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"divide-y\",\n                                children: [\n                                    messages.map((message, index)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_chat_message__WEBPACK_IMPORTED_MODULE_3__.ChatMessage, {\n                                            ...message\n                                        }, index, false, {\n                                            fileName: \"/Users/Steve/Documents/SiteWhisperAi/app/page.tsx\",\n                                            lineNumber: 511,\n                                            columnNumber: 17\n                                        }, this)),\n                                    isLoading && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_chat_message__WEBPACK_IMPORTED_MODULE_3__.ChatMessage, {\n                                        role: \"assistant\",\n                                        content: \"\",\n                                        isLoading: true\n                                    }, void 0, false, {\n                                        fileName: \"/Users/Steve/Documents/SiteWhisperAi/app/page.tsx\",\n                                        lineNumber: 514,\n                                        columnNumber: 17\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/Users/Steve/Documents/SiteWhisperAi/app/page.tsx\",\n                                lineNumber: 509,\n                                columnNumber: 13\n                            }, this)\n                        }, void 0, false, {\n                            fileName: \"/Users/Steve/Documents/SiteWhisperAi/app/page.tsx\",\n                            lineNumber: 508,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_chat_input__WEBPACK_IMPORTED_MODULE_4__.ChatInput, {\n                            onSend: handleChat,\n                            disabled: !hasTokens || isLoading\n                        }, void 0, false, {\n                            fileName: \"/Users/Steve/Documents/SiteWhisperAi/app/page.tsx\",\n                            lineNumber: 522,\n                            columnNumber: 11\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/Steve/Documents/SiteWhisperAi/app/page.tsx\",\n                    lineNumber: 500,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"flex flex-col gap-4\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_token_status__WEBPACK_IMPORTED_MODULE_7__.TokenStatus, {\n                            availableTokens: availableTokens,\n                            maxTokens: INITIAL_TOKENS\n                        }, void 0, false, {\n                            fileName: \"/Users/Steve/Documents/SiteWhisperAi/app/page.tsx\",\n                            lineNumber: 525,\n                            columnNumber: 11\n                        }, this),\n                        showUpgrade && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_upgrade_button__WEBPACK_IMPORTED_MODULE_8__.UpgradeButton, {}, void 0, false, {\n                            fileName: \"/Users/Steve/Documents/SiteWhisperAi/app/page.tsx\",\n                            lineNumber: 526,\n                            columnNumber: 27\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"flex items-center justify-between\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                                    className: \"text-lg font-semibold\",\n                                    children: \"Whisper Memory\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/Steve/Documents/SiteWhisperAi/app/page.tsx\",\n                                    lineNumber: 528,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ui_button__WEBPACK_IMPORTED_MODULE_2__.Button, {\n                                    variant: \"outline\",\n                                    size: \"sm\",\n                                    onClick: handleExport,\n                                    disabled: memoryBlocks.length === 0 || !hasTokens,\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Download_lucide_react__WEBPACK_IMPORTED_MODULE_12__[\"default\"], {\n                                            className: \"mr-2 h-4 w-4\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/Steve/Documents/SiteWhisperAi/app/page.tsx\",\n                                            lineNumber: 535,\n                                            columnNumber: 15\n                                        }, this),\n                                        \"Export\"\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"/Users/Steve/Documents/SiteWhisperAi/app/page.tsx\",\n                                    lineNumber: 529,\n                                    columnNumber: 13\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/Steve/Documents/SiteWhisperAi/app/page.tsx\",\n                            lineNumber: 527,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"space-y-4\",\n                            children: memoryBlocks.length > 0 ? memoryBlocks.map((block, index)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_memory_block__WEBPACK_IMPORTED_MODULE_5__.MemoryBlock, {\n                                    url: block.title,\n                                    content: block.content,\n                                    isSelected: selectedBlocks.includes(block.id),\n                                    onClick: ()=>handleBlockClick(block.id)\n                                }, block.id || \"block-\".concat(index), false, {\n                                    fileName: \"/Users/Steve/Documents/SiteWhisperAi/app/page.tsx\",\n                                    lineNumber: 542,\n                                    columnNumber: 17\n                                }, this)) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"rounded-lg border border-dashed p-8 text-center text-sm text-muted-foreground\",\n                                children: \"No Whisper memory blocks yet. Start by analyzing a website.\"\n                            }, void 0, false, {\n                                fileName: \"/Users/Steve/Documents/SiteWhisperAi/app/page.tsx\",\n                                lineNumber: 552,\n                                columnNumber: 15\n                            }, this)\n                        }, void 0, false, {\n                            fileName: \"/Users/Steve/Documents/SiteWhisperAi/app/page.tsx\",\n                            lineNumber: 539,\n                            columnNumber: 11\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/Steve/Documents/SiteWhisperAi/app/page.tsx\",\n                    lineNumber: 524,\n                    columnNumber: 9\n                }, this)\n            ]\n        }, void 0, true, {\n            fileName: \"/Users/Steve/Documents/SiteWhisperAi/app/page.tsx\",\n            lineNumber: 499,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"/Users/Steve/Documents/SiteWhisperAi/app/page.tsx\",\n        lineNumber: 498,\n        columnNumber: 5\n    }, this);\n}\n_s(HomePage, \"/gN4akarZXOmvp09oO5hGHcWOtI=\", false, function() {\n    return [\n        _components_ui_use_toast__WEBPACK_IMPORTED_MODULE_9__.useToast\n    ];\n});\n_c = HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/page.tsx\n"));

/***/ })

});